{"version":3,"sources":["components/Header/Header.jsx","components/Launch/Launch.jsx","components/LaunchList/LaunchList.jsx","components/Launchdisplay/Launchdisplay.jsx","App.js","serviceWorker.js","index.js"],"names":["Header","className","React","Component","Launch","alt","src","this","props","imgBanner","title","launchDate","description","Lanches","state","lanches","componentDidMount","getLaunch","axios","get","then","response","setState","data","catch","error","console","log","launchList","map","launch","index","img","links","flickr_images","length","details","key","to","flight_number","mission_name","launch_date_local","Launchdisplay","info","fnumber","match","params","getsinglelaunch","misionAttibutes","value","single_launch","padding","background","marginTop","boxShadow","borderRadius","images","style","scale","each","width","rocket_name","roflight_idcket_name","customer","launch_success","article_link","withRouter","App","path","Boolean","window","location","hostname","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.ce0a344e.chunk.js","sourcesContent":["import React from 'react';\r\nimport './styles.css';\r\n\r\n export class Header extends React.Component{\r\n    render(){\r\n        return (<div className='header-component'>             \r\n                <h1> Welcome to space-X</h1>            \r\n            </div>);\r\n        }\r\n}","import React from 'react';\r\nimport './styles.css';\r\nexport class Launch extends React.Component{\r\n    render(){\r\n        return(\r\n            <div>\r\n                <div className='launch-view'>\r\n                    <img alt='Launch' src={this.props.imgBanner} />\r\n                    <div className='content'>\r\n                    <div className='info'>\r\n                        <h1>{this.props.title}</h1>\r\n                        <h1>{this.props.launchDate}</h1>\r\n                    </div>\r\n                    <p>{this.props.description}</p>\r\n\r\n                    </div>        \r\n                </div>\r\n           \r\n            </div>\r\n            \r\n        );\r\n    }\r\n}","import React from 'react';\r\nimport {Launch} from '../Launch/Launch.jsx';\r\nimport axios from 'axios';\r\nimport {Link} from 'react-router-dom';\r\nimport './styles.css';\r\nexport class Lanches extends React.Component{\r\n\r\n    state = {\r\n        lanches :[]\r\n    }\r\n    componentDidMount = () =>{\r\n        this.getLaunch();\r\n    }\r\n\r\n    getLaunch= ()=>{\r\n        axios.get('https://api.spacexdata.com/v3/launches').then(response =>{\r\n           \r\n            this.setState({\r\n                lanches: response.data\r\n              });\r\n        \r\n              \r\n        }).catch((error)=>{\r\n            console.log('error');\r\n        })\r\n\r\n      }\r\n\r\n      launchList = () =>{\r\n         const comnentLanchlist =  this.state.lanches.map((launch, index) => {\r\n             const img = launch.links.flickr_images.length === 0 ? 'https://farm9.staticflickr.com/8617/16789019815_f99a165dc5_o.jpg':launch.links.flickr_images[0]\r\n              const description =  launch.details == null ? 'Hi this is my first react app': launch.details;\r\n             return <Link  key= {'launch'+index}\r\n                            to={'/launchinfo/'+ launch.flight_number}>\r\n                        <Launch  title={launch.mission_name} \r\n                        launchDate={launch.launch_date_local} \r\n                        description={description}\r\n                        imgBanner={img} />\r\n                </Link> \r\n          })\r\n          return comnentLanchlist;\r\n      }\r\n    render(){\r\n            \r\n        return(\r\n            <div className='launch-list'>\r\n                {this.launchList()}\r\n              \r\n            </div>\r\n        );\r\n\r\n    }\r\n}","import React from 'react';\r\nimport axios from 'axios';\r\nimport { withRouter } from 'react-router-dom';\r\nimport { Zoom } from 'react-slideshow-image';\r\nimport 'react-slideshow-image/dist/styles.css';\r\n\r\nimport './styles.css';\r\n\r\n\r\n  \r\n  \r\nexport class Launchdisplay extends React.Component{\r\n\r\n    state = {\r\n        info :{\r\n            links:{\r\n                flickr_images:[]\r\n            }\r\n        }\r\n    }\r\n    componentDidMount = () => {\r\n\r\n        const fnumber = this.props.match.params.flight_number;\r\n        this.getsinglelaunch(fnumber);\r\n    }\r\n\r\n    getsinglelaunch = (fnumber) =>{\r\n\r\n        axios.get('https://api.spacexdata.com/v3/launches/'+ fnumber).then(response =>{\r\n           \r\n            this.setState({\r\n                info: response.data\r\n              });\r\n              \r\n              console.log(this.state.info.links.flickr_images);\r\n              \r\n        }).catch((error)=>{\r\n            console.log('error');\r\n        })\r\n\r\n       \r\n    }\r\n\r\n\r\n    misionAttibutes = (title, value) =>{\r\n        return(<div>\r\n            <h1>{title}:</h1>\r\n            <p>{value}</p>\r\n        </div>);\r\n       } \r\n\r\n       \r\n    render(){\r\n        const single_launch = {\r\n            padding:'10px',\r\n            background:'white',\r\n            marginTop:'20px',\r\n            boxShadow:'2px 2px 10px 2px grey',\r\n            borderRadius:'4px',\r\n        }\r\n\r\n        const images = this.state.info.links.flickr_images.length > 0 ;\r\n        const Slideshow = () => {\r\n            return (\r\n              <div className=\"slide-container\">\r\n               { images && ( <Zoom scale={0.4}>\r\n                  {\r\n                    this.state.info.links.flickr_images.map((each, index) => <img alt='flikrimage' key={index} style={{width: \"100%\"}} src={each} />)\r\n                  }\r\n                </Zoom>)\r\n                 }\r\n              </div>\r\n            )\r\n        }\r\n\r\n        return(\r\n            <div className={single_launch} style={single_launch}>\r\n                { this.misionAttibutes('Mission Name', this.state.info.mission_name) }\r\n\r\n                \r\n                    { Slideshow()}\r\n                 \r\n \r\n\r\n                { this.misionAttibutes('Mission Details', this.state.info.details) }\r\n                { this.misionAttibutes('Launch Date', this.state.info.launch_date_local) }\r\n                { this.misionAttibutes('Racket Name', this.state.info.rocket_name) }\r\n                { this.misionAttibutes('Flight_id', this.state.info.roflight_idcket_name) }\r\n\r\n                { this.misionAttibutes('Customer', this.state.info.customer) }\r\n                { this.misionAttibutes('Launch_success', this.state.info.launch_success) }\r\n                { this.misionAttibutes('Article_link', this.state.info.article_link) }\r\n\r\n\r\n\r\n           </div>\r\n        );\r\n    }\r\n}\r\n\r\n\r\n\r\nexport default withRouter(Launchdisplay);\r\n\r\n\r\n\r\n\r\n   ","import React from 'react';\nimport {Header} from './components/Header/Header.jsx';\nimport {Lanches} from './components/LaunchList/LaunchList.jsx';\nimport Launchdisplay from './components/Launchdisplay/Launchdisplay.jsx';\n\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n  \n} from \"react-router-dom\";\n\nfunction App() {\n  return (\n    <div className=\"space-app\">\n      \n      <Router>\n        <Header />\n        <Switch>\n        <Route path='/launchinfo/:flight_number'>\n          <Launchdisplay />\n        </Route>\n        <Route path='/'>\n          <Lanches />\n        </Route>\n                </Switch>\n      </Router>\n    </div>\n  );\n}\nexport default App;\n\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}